#textdomain wesnoth-jos-random-recruits

# TODO ship this with a "union of all mainline factions" faction

[modification]
    id=jos_random_recruits
    name=_ "Random Recruits"
    type=hybrid
    description=_ "Every time you recruit, you'll be given a random unit from your recruit list."

    [event]
        name=prerecruit
        id=jos_random_recruits_prerecruit
        first_time_only=no
        [lua]
            code=<<
                local ev = wesnoth.current.event_context
                local unit = wesnoth.get_unit(ev.x1, ev.y1)
                local side = wesnoth.sides[unit.side];
                local candidates = {}
                -- Set candidates to the list of recruitable units that we can afford.
                -- Not "all recruitable units" because that's just annoying if the randomly-chosen unit is too expensive to recruit right now
                for _, type in ipairs(side.recruit) do
                    if side.gold >= wesnoth.unit_types[type].cost then
                        table.insert(candidates, type)
                    end
                end
                -- candidates isn't empty because, by the time we get here, the Recruit Unit dialog closed successfully.
                assert(#candidates > 0)
                local new_type = wesnoth.unit_types[candidates[wesnoth.random(1, #candidates)]]
                local new_cost = new_type.cost
                -- Must be true, since it was chosen from candidates
                assert(side.gold >= new_cost)

                -- pre-refund the unit the engine thinks it recruited; the engine will subtract that cost before the "recruit" event fires.
                side.gold = side.gold + unit.cost

                unit:erase()
                unit = nil
                new_unit = wesnoth.create_unit { type = new_type.id, side = side.side }
                new_unit:to_map(ev.x1, ev.y1)

                -- charge the unit that was actually "recruited"
                side.gold = side.gold - new_unit.cost
            >>
        [/lua]
    [/event]

[/modification]
